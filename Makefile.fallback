# SPDX-License-Identifier: GPL-3.0-or-later
#
# Makefile  This file is part of Woofer GTK
# Copyright (C) 2022  Quico Augustijn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed "as is" in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  If your
# computer no longer boots, divides by 0 or explodes, you are the only
# one responsible.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# version 3 along with this program.  If not, see
# <https://www.gnu.org/licenses/gpl-3.0.html>.
#
#
# This Makefile can be used to compile the software with the default
# configuration, but you are encouraged to configure the project using the
# `./configure` script before using Make.

SHELL = /bin/sh

# Variables
NAME ?= Woofer GTK
TARNAME ?= woofer-gtk
LIBNAME ?= woofer
VERSION ?= 0.1.0
CC ?= gcc
LD ?= ld
MKDIR_P = mkdir -p

# Common prefix for installation directories
# (following the Makefile Conventions)
prefix ?= /usr/local
exec_prefix ?= $(prefix)
bindir ?= $(exec_prefix)/bin
sbindir ?= $(exec_prefix)/sbin
libexecdir ?= $(exec_prefix)/libexec
datarootdir ?= $(prefix)/share
datadir ?= $(datarootdir)
sysconfdir ?= $(prefix)/etc
sharedstatedir ?= $(prefix)/com
localstatedir ?= $(prefix)/var
runstatedir ?= $(localstatedir)/run
includedir ?= $(prefix)/include
docdir ?= $(datarootdir)/doc/$(TARNAME)
infodir ?= $(datarootdir)/info
htmldir ?= $(docdir)
dvidir ?= $(docdir)
pdfdir ?= $(docdir)
psdir ?= $(docdir)
libdir ?= $(exec_prefix)/lib
localedir ?= $(datarootdir)/locale
mandir ?= $(datarootdir)/man
srcdir ?= src

# Build information
BIN_NAME = $(TARNAME)
DIST_PKG = $(TARNAME)-$(VERSION)

# Dependencies and targets
DEPENDENCIES = glib-2.0 gio-2.0 gobject-2.0 gdk-pixbuf-2.0 gtk+-3.0 \
               gstreamer-1.0
PREREQUISITE = main interface about icons preferences question_dialog settings \
               utils resource/resources widgets/action_list_row \
               widgets/song_info
DESKTOP_FILE = $(TARNAME).desktop
TAR_FILES = AUTHORS BUGS CODE_OF_CONDUCT.md configure configure.ac \
            CONTRIBUTING.md COPYING gdb install-sh Makefile.fallback \
            Makefile.in README.md run run-debug $(TARNAME).doap
TAR_DIRS = data resources src

# Compiler and linker flags
LIBS += -lm -l$(LIBNAME)
WARN_FLAGS = -Wall -Wextra -Wno-missing-field-initializers -Wno-unused-parameter
INC_FLAGS = -I$(SRC_DIR)
DEBUG_FLAGS = -g -ggdb

# Directories used for compilation
BIN_DIR = bin
OBJ_DIR = obj
SRC_DIR = src
DATA_DIR = data

# Final binary target
TARGET_EXEC ?= $(BIN_DIR)/$(BIN_NAME)

# Get library linking flags
PKG_FLAGS := `pkg-config --cflags $(DEPENDENCIES)`
PKG_LIBS := `pkg-config --libs $(DEPENDENCIES)`

# Sources and targets
OBJS := $(PREREQUISITE:%=$(OBJ_DIR)/%.o)
SRCS := $(PREREQUISITE:%=$(SRC_DIR)/%.c)

# Prerequisites search path
vpath %.c $(SRC_DIR)
vpath %.h $(SRC_DIR)

# Targets that do not generate any files
.PHONY: all resources clean distclean mostlyclean maintainer-clean dist check

# Default target
all: $(TARGET_EXEC)

# Final binary linkage
$(TARGET_EXEC): $(OBJS)
	@$(MKDIR_P) $(@D)
	$(CC) -pie -o $@ $^ $(LIBS) $(PKG_LIBS) $(CFLAGS) $(LDFLAGS)

# Object compilation
$(OBJ_DIR)/%.o: %.c
	@$(MKDIR_P) $(@D)
	$(CC) $(INC_FLAGS) -fPIE -c $< -o $@ $(PKG_FLAGS) $(WARN_FLAGS) $(DEBUG_FLAGS) $(CFLAGS) $(CPPFLAGS)

# Recompile resource files
resources: resources/resources.gresource.xml
	glib-compile-resources --sourcedir=resources --generate-source --internal $<
	glib-compile-resources --sourcedir=resources --generate-header --internal $<
	cp -f resources/resources.c src/resource/resources.c
	cp -f resources/resources.h src/resource/resources.h

# Clean all compiled files
clean:
	@$(MAKE) mostlyclean
	-rm -fv $(TARGET_EXEC)

# Clean all generated and compiled files
distclean:
	@$(MAKE) clean
	-rm -frv autom4te.cache aclocal.m4 config.log config.status Makefile

# Clean temporary files
mostlyclean:
	-rm -fv $(OBJ_DIR)/*.i $(OBJ_DIR)/*.s $(OBJ_DIR)/*.o
	-rm -fv $(OBJ_DIR)/*/*.i $(OBJ_DIR)/*/*.s $(OBJ_DIR)/*/*.o

# Clean almost everything
maintainer-clean:
	@echo 'This command is intended for maintainers to use; it'
	@echo 'deletes files that may need special tools to rebuild.'
	@$(MAKE) distclean
	-rm -fv resources/resources.c resources/resources.h resources.gresource

# Create a distribution tar file
dist: $(TAR_FILES)
	@$(MKDIR_P) $(DIST_PKG)
	cp -dflRux -t $(DIST_PKG) $(TAR_FILES) $(TAR_DIRS)
	tar -c --remove-files --file=$(DIST_PKG).tar $(DIST_PKG)
	gzip -f $(DIST_PKG).tar
	-rm -rf $(DIST_PKG)

# Perform self-tests
check: $(TARGET_EXEC)
	./$< --version
