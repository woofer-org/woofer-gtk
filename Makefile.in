# SPDX-License-Identifier: GPL-3.0-or-later
#
# @configure_input@
# Copyright (C) 2022  Quico Augustijn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed "as is" in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  If your
# computer no longer boots, divides by 0 or explodes, you are the only
# one responsible.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# version 3 along with this program.  If not, see
# <https://www.gnu.org/licenses/gpl-3.0.html>.

SHELL = /bin/sh

# Variables
NAME = @PACKAGE_NAME@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
VERSION = @PACKAGE_VERSION@
CC = @CC@
EXE_EXT = @EXEEXT@
OBJ_EXT = @OBJEXT@
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
MKDIR_P = @MKDIR_P@
CFLAGS ?= @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
PKG_FLAGS += @GLIB_CFLAGS@ @GIO_CFLAGS@ @GOBJECT_CFLAGS@ @GSTREAMER_CFLAGS@ @GDK_PIXBUF_CFLAGS@ @GTK_CFLAGS@
PKG_LIBS += @GLIB_LIBS@ @GIO_LIBS@ @GOBJECT_LIBS@ @GSTREAMER_LIBS@ @GDK_PIXBUF_LIBS@ @GTK_LIBS@

# Directory variables
builddir = @builddir@
abs_builddir = @abs_builddir@
top_builddir = @top_builddir@
top_build_prefix = @top_build_prefix@
abs_top_builddir = @abs_top_builddir@
srcdir = @srcdir@
abs_srcdir = @abs_srcdir@
top_srcdir = @top_srcdir@
abs_top_srcdir = @abs_top_srcdir@

# Common prefix for installation directories
# (following the Makefile Conventions)
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datarootdir = @datarootdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
runstatedir = @runstatedir@
includedir = @includedir@
docdir = @docdir@
infodir = @infodir@
htmldir = @htmldir@
dvidir = @dvidir@
pdfdir = @pdfdir@
psdir = @psdir@
libdir = @libdir@
localedir = @localedir@
mandir = @mandir@

# Build information
BIN_NAME = $(PACKAGE_TARNAME)$(EXE_EXT)
DIST_PKG = $(PACKAGE_TARNAME)-$(VERSION)

# Dependencies and targets
PREREQUISITE = main interface about icons preferences question_dialog settings \
               utils resource/resources widgets/action_list_row \
               widgets/song_info
DESKTOP_FILE = $(PACKAGE_TARNAME).desktop
METADATA_FILE = org.$(PACKAGE_TARNAME).metainfo.xml
TAR_FILES = AUTHORS BUGS CODE_OF_CONDUCT.md configure configure.ac \
            CONTRIBUTING.md COPYING gdb install-sh Makefile.fallback \
            Makefile.in README.md run run-debug $(PACKAGE_TARNAME).doap
TAR_DIRS = data resources src

# Compiler and linker flags
WARN_FLAGS = -Wall -Wextra -Wno-missing-field-initializers -Wno-unused-parameter
INC_FLAGS = -I$(SRC_DIR)
DEBUG_FLAGS = -g -ggdb

# Directories used for compilation
BIN_DIR = bin
OBJ_DIR = obj
SRC_DIR = src
DATA_DIR = data

# Final binary target
TARGET_EXEC ?= $(BIN_DIR)/$(BIN_NAME)

# Sources and targets
OBJS := $(PREREQUISITE:%=$(OBJ_DIR)/%.$(OBJ_EXT))
SRCS := $(PREREQUISITE:%=$(SRC_DIR)/%.c)

# Targets that do not generate any files
.PHONY: all resources clean distclean mostlyclean install uninstall \
        maintainer-clean dist check installcheck installdirs

# Default target
all: $(TARGET_EXEC)

# Final binary linkage
$(TARGET_EXEC): $(OBJS)
	@$(MKDIR_P) $(@D)
	$(CC) -pie -o $@ $^ $(LIBS) $(PKG_LIBS) $(CFLAGS) $(LDFLAGS)

# Object compilation
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@$(MKDIR_P) $(@D)
	$(CC) $(INC_FLAGS) -fPIE -c $< -o $@ $(PKG_FLAGS) $(WARN_FLAGS) $(DEBUG_FLAGS) $(CFLAGS) $(CPPFLAGS)

# Install required files
install:
	$(MAKE) installdirs
	$(INSTALL_PROGRAM) $(TARGET_EXEC) $(DESTDIR)$(bindir)/$(BIN_NAME)
	$(INSTALL_DATA) $(DATA_DIR)/$(DESKTOP_FILE) $(DESTDIR)$(datarootdir)/applications/$(DESKTOP_FILE)
	$(INSTALL_DATA) $(DATA_DIR)/$(METADATA_FILE) $(DESTDIR)$(datarootdir)/metainfo/$(METADATA_FILE)

# Uninstall installed files
uninstall:
	-rm -fv $(DESTDIR)$(bindir)/$(BIN_NAME)
	-rm -fv $(DESTDIR)$(datarootdir)/applications/$(DESKTOP_FILE)

# Recompile resource files
resources: resources/resources.gresource.xml
	glib-compile-resources --sourcedir=resources --generate-source --internal $<
	glib-compile-resources --sourcedir=resources --generate-header --internal $<
	cp -f resources/resources.c src/resource/resources.c
	cp -f resources/resources.h src/resource/resources.h

# Clean all compiled files
clean:
	@$(MAKE) mostlyclean
	-rm -fv $(TARGET_EXEC)

# Clean all generated and compiled files
distclean:
	@$(MAKE) clean
	-rm -frv autom4te.cache aclocal.m4 config.log config.status Makefile

# Clean temporary files
mostlyclean:
	-rm -fv $(OBJ_DIR)/*.i $(OBJ_DIR)/*.s $(OBJ_DIR)/*.o
	-rm -fv $(OBJ_DIR)/*/*.i $(OBJ_DIR)/*/*.s $(OBJ_DIR)/*/*.o

# Clean almost everything
maintainer-clean:
	@echo 'This command is intended for maintainers to use; it'
	@echo 'deletes files that may need special tools to rebuild.'
	@$(MAKE) distclean
	-rm -fv resources/resources.c resources/resources.h resources.gresource

# Create a distribution tar file
dist: $(TAR_FILES)
	@$(MKDIR_P) $(DIST_PKG)
	cp -dflRux -t $(DIST_PKG) $(TAR_FILES) $(TAR_DIRS)
	tar -c --remove-files --file=$(DIST_PKG).tar $(DIST_PKG)
	gzip -f $(DIST_PKG).tar
	-rm -rf $(DIST_PKG)

# Perform self-tests
check: $(TARGET_EXEC)
	./$< --version

# Perform installation tests
installcheck:
	$(DESTDIR)$(bindir)/$(BIN_NAME) --version

# Make sure all installation directories (e.g. $(bindir))
# actually exist by making them if necessary.
installdirs:
	@$(MKDIR_P) $(DESTDIR)$(bindir)
	@$(MKDIR_P) $(DESTDIR)$(datarootdir)/applications
	@$(MKDIR_P) $(DESTDIR)$(datarootdir)/metainfo

# Reconfigure Makefile
Makefile:
	./configure
